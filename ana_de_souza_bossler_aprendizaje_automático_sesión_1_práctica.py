# -*- coding: utf-8 -*-
"""Ana de Souza Bossler Aprendizaje Automático - Sesión 1 - Práctica

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D43RCSwWZGiWvBvbd14d3oJwI5NJMfii

<img src='https://drive.google.com/uc?id=1DHE8rHnhKRam8LrZpOkVY6iF3GMK7Jwf' caption="Máster Universitario en Automática y Robótica"></center>

# Aprendizaje Automático
## Práctica 1

Profesor: **Jose Javier Valero Mas**

### Ejercicio

La tarea a realizar consistirá en poner en práctica los conceptos prácticos introducidos en esta sesión.

Para ello el alumno deberá:
* Escoger un conjunto de datos sobre regresión
* Realizar la carga del mismo, separando por atributos y valor a estimar
* Dividir el conjunto en conjuntos de Train/Test
* Entrenar dos algoritmos de regresión, concretamente Linear Regression y Lasso, obteniendo los coeficientes de ajuste


Para la realización de la misma se deberá utilizar alguno de estos dos conjuntos de datos:
* https://archive.ics.uci.edu/ml/datasets/Wine+Quality
* https://archive.ics.uci.edu/ml/datasets/Appliances+energy+prediction


### Entrega

  * Haz una copia de este archivo ("Archivo" > "Guardar una copia en drive").

  * Realiza la práctica descrita en el apartado anterior sobre el nuevo archivo. Documenta los pasos que vas realizando incrustando texto en Colab.

  * Genera un enlace para compartir (acuérdate de dar los permisos apropiados). Copia y pega el enlace en la entrega habilitada en el Moodle de la asignatura.

# Nueva sección

1.Escoger un conjunto de datos sobre regresión
Escogimos el calidad del vino rojo (winequality-red.csv). 
2. Importamos las librerías que iremos utilizar
"""

import pandas as pd
print(pd.__version__)

import matplotlib.pyplot as plt
import numpy as np

import sklearn
print("Versión de librería sklearn: {}".format(sklearn.__version__))

from sklearn.model_selection import train_test_split

vino = pd.read_csv("/content/winequality-red.csv", header=0, delimiter=';')

print(vino)

vino.head()

print(f'The number of rows are {vino.shape[0]} \nand the number of columns are {vino.shape[1]}')

print(vino.dtypes)

vino.describe()

def missing(df):
    total=df.isnull().sum().sort_values(ascending=False)
    percent=(df.isnull().sum()*100/df.isnull().count()).sort_values(ascending=False)

missing(vino)

vino.isnull().sum()

print("El formato del fichero es {} filas X {} columnas:\n".format(vino.shape[0],\
                                                                vino.shape[1]))

plt.plot(vino.loc[:200]['quality'])
plt.title('quality (first 200 values)')
plt.show()

corrMatrix = vino.corr()

print (corrMatrix)

"""3. Tras un breve análisis de los datos separamos los atributos. vemos que la correlación no es elevada entre la mayoría de las variables, que caso contrario nos daria mejor respuesta con lasso. Tendríamos que ver la forma de los datos, dado que si no están normalizados sería un problema para Lasso. Queremos estimar la calidad que será nuestra variable dependiente (Y). Las demás serán nuestras variables independientes."""

X = vino.loc[:,'fixed acidity':'alcohol']
Y = vino.loc[:,'quality']

"""4. Dividir el conjunto en conjuntos de Train/Test, lo ponemos a 0.2 o 20% para testear y 80% para entrenar"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=.20)
X_val, X_test_test, Y_val, Y_test = train_test_split(X, Y, test_size=.20)
print("Datos iniciales\t\t:\t{}\n\t- X_train\t:\t{}\n\t- X_test\t:\t{}".format(len(X),len(X_train),len(X_test)))

X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size=len(X_test))

print("Datos iniciales\t\t:\t{}\n\t- X_train\t:\t{}\n\t- X_val\t\t:\t{}\n\t- X_test\t:\t{}".format(len(X),len(X_train),len(X_val),len(X_test)))

"""5. Entrenar con LR y Lasso, importando LR y Lasso respectivamente"""

from sklearn.linear_model import LinearRegression

model = LinearRegression().fit(X_train,Y_train)

Y_predict = model.predict(X_test)
plt.plot(np.array(Y_test)[:200],'b')
plt.plot(Y_predict[:200],'r')
plt.legend(['Original', 'Prediction'])
plt.show()

print("Bondad del ajuste en Train:\t{}".format(model.score(X_train,Y_train)))

print("Bondad del ajuste en Test:\t{}".format(model.score(X_test,Y_test)))

"""Para la regresión lineal vemos que el r2 del entrenamiento es de un 0.349, o sea, las variables independientes explicarían un 34.9% de la variación en la dependeinte calidad del vino. 
Para el r2 del test vemos que es muy malo, con el negativo significando que el resultado es peor de lo que hubiera sido si los datos fueran "predecidos" aleatoriamente. La media puede servir más que la regresión. Pero concuerda que el entrenamiento tenga un resultado mejor que el test.

"""

from sklearn.linear_model import Lasso
model = Lasso(alpha=1.0).fit(X_train,Y_train)

print("Bondad del ajuste en Train:\t{}".format(model.score(X_train,Y_train)))

print("Bondad del ajuste en Test:\t{}".format(model.score(X_test,Y_test)))

"""Con la Lasso y alpha 1.0 en los datos de entrenamiento tenemos un r2 del 0.046 lo que significa que las variables independientes explicarían un cambio del solo 4.6% en la variable dependiente aún con la regularización. Los datos de test son peores de los del entrenamiento como esperado, pero elegiendo aleatoriamente se predeciría mejor que con el coeficiente de regresión. """